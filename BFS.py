# BFS는 너비 우선 탐색이라고도 부르며, 그래프에서 가까운 노드부터 우선적으로 탐색하는 알고리즘
# BFS는 큐 자료구조를 이용하며, 구체적인 동작 과정은 다음과 같다

# 1. 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다
# 2. 큐에서 노드를 꺼낸 뒤에 해당 노드의 인접 노드 중에서 방문하지 않은 노드를 모두 큐에 삽입하고 방문 처리를 한다
# 3. 더이상 2번의 과정을 수행할 수 없을 때까지 반복한다

# BFS는 시작 노드로부터 가장 가까운 노드를 우선적으로 탐색함
# 이러한 특징으로 인해 각 간선의 비용이 동일한 상황에서 최단 거리를 구하는 목적으로도 사용됨

from collections import deque

# BFS 메서드 정의
def bfs(graph, start, visited):
    # 큐 구현을 위해 deque 라이브러리 사용(시작 노드를 큐에 삽입한 상태)
    queue = deque([start])
    # 현재 노드를 방문 처리
    visited[start] = True
    # 큐가 빌 때까지 무한 반복
    # 문자열, 리스트, 튜플, 딕셔너리 등의 값이 비어 있으면(" ", [ ], ( ), { }) 거짓이 된다. 비어있지 않으면 참이 된다.
    while queue:
        # 큐에서 하나의 원소를 뽑아 출력하기
        v = queue.popleft() # queue에서 하나의 원소를 뽑아 해당 값을 v에 반환함
        print(v, end = ' ')
        
        for i in graph[v]: # 큐에서 뽑은 원소에 인접한 노드들을 모두 queue에 추가 & 방문 처리
            if not visited[i]: # 만약 방문하지 않았다면 실행 
                queue.append(i) # queue에 추가
                visited[i] = True # 방문 처리


graph = [
    [],
    [2, 3, 8],
    [1, 7],
    [1, 4, 5],
    [3, 5],
    [3, 4],
    [7],
    [2, 6, 8],
    [1, 7]
]

visited = [False] * 9
bfs(graph, 1, visited)
