# 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠르게 동작하는 정렬 알고리즘
# 계수 정렬(=Counting sort)은 데이터 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능 => 각각의 데이터가 몇 번씩 등장했는지 세는 방식으로 동작
# 데이터의 개수가 N, 데이터(양수) 중 최댓값이 K일 때 최악의 경우에도 수행 시간 O(N+K)를 보장
# 기본적으로, 배열에서 인덱스에 접근할 때는 상수 시간, O(1)이 걸린다고 봄
# 계수 정렬은 때에 따라서 심각한 비효율성을 초래함 => ex) 데이터가 0과 999,999로 단 2개만 존재하는 경우
# 계수 정렬은 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용 가능

# array의 데이터 값이 곧 count의 인덱스 값 !!!!

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8 ,0, 5, 2]
# 모든 범위를 포함하는 리스트 선언(모든 값은 0으로 초기화)
count = [0] * (max(array) + 1)

for i in range(len(array)): 
    count[array[i]] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

for i in range(len(count)):
    for j in range(count[i]):
        print(i, end = ' ')

