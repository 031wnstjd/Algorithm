# dp는 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
# 이미 계산된 결과(작은 문제)를 별도의 메모리 영역에 저장하여 다시 계산하지 않도록 함
# dp의 구현은 일반적으로 탑다운과 바텀업 방식으로 구성됨

# dp는 문제가 다음의 조건을 만족할 때 사용할 수 있음
# 1. 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있음
# 2. 중복되는 부분 문제 : 동일한 작은 문제를 반복적으로 해결해야 함

# 메모이제이션은 dp를 구현하는 방법 중 하나
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법
# 같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴
# 값을 기록해 놓는다는 점에서 캐싱(Cashing)이라고도 함

# 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
def fibo(x):
    # 종료 조건 (1 혹은 2일때 1을 반환) 
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제라면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환    
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]

result = fibo(99)
print(result)
